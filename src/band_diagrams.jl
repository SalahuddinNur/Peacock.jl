"""
Plot the bands generated by my_solve(k) along k_path.
"""
function plot_band_diagram(my_solve::Function, k_path; dk=0, labels=[], bands=1:10, wscale=1, color="k", markersize=nothing)

	# Convenience function to plot the frequencies at a given k
	function plot_freqs(x, ws)
		xs = [x for _ in 1:length(bands)]
		ys = wscale * ws[bands]
		plot(xs, ys, ".", color=color, alpha=0.5, markersize=markersize)
	end

	# Replace 0 with [0,0]
	k_path = Array{Float64,1}[k == 0 ? [0,0] : k for k in k_path]

	# Set default k-point density
	if dk == 0
		dk = norm(k_path[2]-k_path[1])/10
	end

	# Set default labels (blank)
	if labels == []
		labels = ["" for k in k_path]
	end
	@assert length(k_path) == length(labels)

	# Solve and plot first k-point
	k = k_path[1]
	ws, vs = my_solve(k)
	plot_freqs(k, ws)
	# Store coordinate of first label
	x = 0
	labels_x = []
	push!(labels_x, x)

	for (k1,k2) in zip(k_path[1:end-1], k_path[2:end])
		# Sample the region between k1 and k2 such that
		# the spacing between points is smaller than or equal to dk
		d = norm(k2-k1)
		N = ceil(d/dk)
		for n in 1:N
			# Solve at new k-point
			k = k1 + n*(k2-k1)/N
			ws, vs = my_solve(k)
			# Update coordinates and plot
			x += d/N
			plot_freqs(x, ws)
		end
		# Store coordinate of label
		push!(labels_x, x)
	end

	# Set labels and limits
	xticks(labels_x, labels)
	for x in labels_x[2:end-1]
		axvline(x, color="k", lw=1)
	end
	xlim(0,x)
	ylim(bottom=0)

end


function plot_band_diagram(cg, ks, pol::Polarisation; dk=0, labels=[], bands=1:10, wscale=1, color="k", markersize=nothing)
	my_solve(k) = solve(cg, k, pol)
	plot_band_diagram(my_solve, ks; dk=dk, labels=labels, bands=bands, wscale=wscale, color=color, markersize=markersize)
end
